---
alwaysApply: true
---
# Cline Project Rules & Patterns

이 파일은 프로젝트 작업 시 중요한 패턴, 선호사항, 학습 내용을 기록합니다.

## 프로젝트 특성 및 컨텍스트

### 프로젝트 정체성
- **이름**: Playwright + Axios 통합 테스트 환경
- **목적**: 코딩 초보자를 위한 테스트 자동화 학습 플랫폼
- **핵심 가치**: 학습 용이성 > 기능 복잡성

### 대상 사용자 이해
- **주 사용자**: 테스트 자동화 초보자 (개발 경험 6개월-2년)
- **한국어 사용자**: 모든 문서, 주석, 메시지는 한글 우선
- **학습 목표**: 3분 설치 → 30분 학습 → 1시간 실습 → 실무 적용

## 코딩 스타일 및 원칙

### 명명 규칙
```typescript
// ✅ 좋은 예 - 한글 주석 + 의미있는 영어명
/**
 * 🔍 서버 상태 확인 테스트
 * 가장 기본적인 테스트 - 서버가 정상적으로 응답하는지 확인
 */
test('서버 상태 확인', async ({ apiClient }) => {

// ✅ 파일명 패턴
user.api.test.ts     // 기능.타입.test.ts
login.e2e.test.ts    // 기능.타입.test.ts
```

### 주석 전략
1. **이모지 활용**: 🔍(확인), ✅(성공), ❌(실패), 🎯(목표), 📝(입력), 🖱️(클릭)
2. **설명 수준**: 초보자가 코드 없이도 70% 이해 가능
3. **목적 중심**: "무엇을" 보다 "왜"를 설명

### 에러 처리 패턴
```typescript
// ✅ 초보자 친화적 에러 처리
try {
  await performLogin(page);
} catch (error) {
  console.warn('⚠️ 로그인 실패 - 실제 웹사이트가 없을 수 있습니다');
  console.warn('이는 정상적인 상황입니다 (실제 서버가 없는 경우)');
  expect(error).toBeDefined();
}
```

## 프로젝트 구조 패턴

### 폴더 구조 원칙
- `tests/api/`: API 테스트 (빠른 실행)
- `tests/e2e/`: E2E 테스트 (안정성 중심)
- `tests/config/`: 설정 파일 중앙화
- `tests/helpers/`: 재사용 가능한 유틸리티
- `tests/fixtures/`: Playwright 확장

### 파일 역할 분리
1. **기능별 분리**: 사용자, 상품, 주문 등 도메인별
2. **타입별 분리**: API vs E2E
3. **역할별 분리**: 설정, 헬퍼, 픽스처

## 테스트 작성 패턴

### 테스트 구조
```typescript
test.describe('기능명 테스트', () => {
  test('구체적 시나리오', async ({ apiClient, page }) => {
    console.log('🎯 테스트 시작 메시지');
    
    // 1단계: 준비
    // 2단계: 실행  
    // 3단계: 검증
    
    console.log('✅ 성공 메시지');
  });
});
```

### 데이터 관리 원칙
1. **자동 생성**: `generateFakeUser()` 등 사용
2. **자동 정리**: 테스트 후 생성 데이터 삭제
3. **안전성**: 실제 데이터 오염 방지

## 기술적 결정사항

### 의존성 관리
- **고정 버전**: Major 버전은 수동 업데이트
- **최소화**: 꼭 필요한 패키지만 추가
- **초보자 친화**: 복잡한 설정 도구 지양

### 브라우저 전략
- **기본**: Chromium (안정성)
- **확장**: Firefox, WebKit (호환성 검증)
- **모바일**: 선택적 지원

### 환경 설정
- **환경변수**: .env 파일 활용
- **기본값**: 안전한 기본값 제공
- **검증**: 필수 설정 누락 시 명확한 안내

## 문제 해결 패턴

### 일반적 이슈
1. **OS 호환성**: Mac/Windows 키보드 단축키 차이
2. **서버 의존성**: Mock 서버 없을 때 대응
3. **환경 차이**: Node.js 버전, npm 버전

### 디버깅 전략
1. **로깅**: 단계별 진행 상황 출력
2. **스크린샷**: 실패 시 자동 캡처
3. **재시도**: 네트워크 이슈 대응

## 사용자 경험 원칙

### 진입 장벽 최소화
- **3분 설치**: npm install + 브라우저 설치
- **5개 명령어**: 첫 테스트까지 최대 5단계
- **명확한 가이드**: 단계별 스크린샷 포함

### 학습 곡선 관리
1. **점진적 복잡성**: 간단한 예제부터 시작
2. **성취감**: 작은 성공 경험 제공
3. **실무 연결**: 학습 후 바로 적용 가능

### 에러 대응
- **친화적 메시지**: 겁먹지 않는 표현
- **해결 방법**: 구체적인 다음 단계 제시
- **학습 기회**: 에러를 통한 이해 증진

## 확장 가이드

### 새 테스트 추가 시
1. **기존 패턴**: 유사한 테스트 참고
2. **헬퍼 활용**: common-actions, test-data 활용
3. **문서 업데이트**: 가이드 문서 갱신

### 새 기능 추가 시
1. **사용자 영향**: 초보자에게 미치는 영향 고려
2. **문서화**: 즉시 가이드 문서 작성
3. **예제**: 실제 사용 예제 제공

## 협업 및 커뮤니케이션

### 코드 리뷰 기준
- **가독성**: 초보자가 이해할 수 있는가?
- **일관성**: 기존 패턴과 일치하는가?
- **문서화**: 적절한 주석이 있는가?

### 이슈 보고
- **재현 단계**: 명확한 단계별 설명
- **환경 정보**: OS, Node.js 버전 등
- **해결 우선순위**: 초보자 영향도 기준

## 품질 기준

### 코드 품질
- **타입 안전성**: TypeScript 엄격 모드
- **테스트 격리**: 테스트 간 의존성 없음
- **에러 처리**: 모든 실패 케이스 고려

### 문서 품질
- **완성도**: 단계별 가이드 완비
- **정확성**: 실제 동작과 일치
- **친화성**: 초보자 용어 사용

## 학습 및 개선

### 사용자 피드백 패턴
- **긍정적**: 한글 주석, 단계별 가이드, 실무 적용성
- **개선 요청**: 더 많은 예제, Mock 서버, 에러 가이드

### 지속적 개선 영역
1. **예제 확장**: 다양한 실무 시나리오
2. **도구 통합**: 더 나은 개발 경험
3. **커뮤니티**: 질문/답변 생태계

---

이 규칙들은 프로젝트 작업 시 일관성과 품질을 유지하기 위한 가이드라인입니다. 
새로운 패턴이나 인사이트가 발견되면 이 파일을 업데이트하여 축적된 지식을 보존합니다.# Cline Project Rules & Patterns

이 파일은 프로젝트 작업 시 중요한 패턴, 선호사항, 학습 내용을 기록합니다.

## 프로젝트 특성 및 컨텍스트

### 프로젝트 정체성
- **이름**: Playwright + Axios 통합 테스트 환경
- **목적**: 코딩 초보자를 위한 테스트 자동화 학습 플랫폼
- **핵심 가치**: 학습 용이성 > 기능 복잡성

### 대상 사용자 이해
- **주 사용자**: 테스트 자동화 초보자 (개발 경험 6개월-2년)
- **한국어 사용자**: 모든 문서, 주석, 메시지는 한글 우선
- **학습 목표**: 3분 설치 → 30분 학습 → 1시간 실습 → 실무 적용

## 코딩 스타일 및 원칙

### 명명 규칙
```typescript
// ✅ 좋은 예 - 한글 주석 + 의미있는 영어명
/**
 * 🔍 서버 상태 확인 테스트
 * 가장 기본적인 테스트 - 서버가 정상적으로 응답하는지 확인
 */
test('서버 상태 확인', async ({ apiClient }) => {

// ✅ 파일명 패턴
user.api.test.ts     // 기능.타입.test.ts
login.e2e.test.ts    // 기능.타입.test.ts
```

### 주석 전략
1. **이모지 활용**: 🔍(확인), ✅(성공), ❌(실패), 🎯(목표), 📝(입력), 🖱️(클릭)
2. **설명 수준**: 초보자가 코드 없이도 70% 이해 가능
3. **목적 중심**: "무엇을" 보다 "왜"를 설명

### 에러 처리 패턴
```typescript
// ✅ 초보자 친화적 에러 처리
try {
  await performLogin(page);
} catch (error) {
  console.warn('⚠️ 로그인 실패 - 실제 웹사이트가 없을 수 있습니다');
  console.warn('이는 정상적인 상황입니다 (실제 서버가 없는 경우)');
  expect(error).toBeDefined();
}
```

## 프로젝트 구조 패턴

### 폴더 구조 원칙
- `tests/api/`: API 테스트 (빠른 실행)
- `tests/e2e/`: E2E 테스트 (안정성 중심)
- `tests/config/`: 설정 파일 중앙화
- `tests/helpers/`: 재사용 가능한 유틸리티
- `tests/fixtures/`: Playwright 확장

### 파일 역할 분리
1. **기능별 분리**: 사용자, 상품, 주문 등 도메인별
2. **타입별 분리**: API vs E2E
3. **역할별 분리**: 설정, 헬퍼, 픽스처

## 테스트 작성 패턴

### 테스트 구조
```typescript
test.describe('기능명 테스트', () => {
  test('구체적 시나리오', async ({ apiClient, page }) => {
    console.log('🎯 테스트 시작 메시지');
    
    // 1단계: 준비
    // 2단계: 실행  
    // 3단계: 검증
    
    console.log('✅ 성공 메시지');
  });
});
```

### 데이터 관리 원칙
1. **자동 생성**: `generateFakeUser()` 등 사용
2. **자동 정리**: 테스트 후 생성 데이터 삭제
3. **안전성**: 실제 데이터 오염 방지

## 기술적 결정사항

### 의존성 관리
- **고정 버전**: Major 버전은 수동 업데이트
- **최소화**: 꼭 필요한 패키지만 추가
- **초보자 친화**: 복잡한 설정 도구 지양

### 브라우저 전략
- **기본**: Chromium (안정성)
- **확장**: Firefox, WebKit (호환성 검증)
- **모바일**: 선택적 지원

### 환경 설정
- **환경변수**: .env 파일 활용
- **기본값**: 안전한 기본값 제공
- **검증**: 필수 설정 누락 시 명확한 안내

## 문제 해결 패턴

### 일반적 이슈
1. **OS 호환성**: Mac/Windows 키보드 단축키 차이
2. **서버 의존성**: Mock 서버 없을 때 대응
3. **환경 차이**: Node.js 버전, npm 버전

### 디버깅 전략
1. **로깅**: 단계별 진행 상황 출력
2. **스크린샷**: 실패 시 자동 캡처
3. **재시도**: 네트워크 이슈 대응

## 사용자 경험 원칙

### 진입 장벽 최소화
- **3분 설치**: npm install + 브라우저 설치
- **5개 명령어**: 첫 테스트까지 최대 5단계
- **명확한 가이드**: 단계별 스크린샷 포함

### 학습 곡선 관리
1. **점진적 복잡성**: 간단한 예제부터 시작
2. **성취감**: 작은 성공 경험 제공
3. **실무 연결**: 학습 후 바로 적용 가능

### 에러 대응
- **친화적 메시지**: 겁먹지 않는 표현
- **해결 방법**: 구체적인 다음 단계 제시
- **학습 기회**: 에러를 통한 이해 증진

## 확장 가이드

### 새 테스트 추가 시
1. **기존 패턴**: 유사한 테스트 참고
2. **헬퍼 활용**: common-actions, test-data 활용
3. **문서 업데이트**: 가이드 문서 갱신

### 새 기능 추가 시
1. **사용자 영향**: 초보자에게 미치는 영향 고려
2. **문서화**: 즉시 가이드 문서 작성
3. **예제**: 실제 사용 예제 제공

## 협업 및 커뮤니케이션

### 코드 리뷰 기준
- **가독성**: 초보자가 이해할 수 있는가?
- **일관성**: 기존 패턴과 일치하는가?
- **문서화**: 적절한 주석이 있는가?

### 이슈 보고
- **재현 단계**: 명확한 단계별 설명
- **환경 정보**: OS, Node.js 버전 등
- **해결 우선순위**: 초보자 영향도 기준

## 품질 기준

### 코드 품질
- **타입 안전성**: TypeScript 엄격 모드
- **테스트 격리**: 테스트 간 의존성 없음
- **에러 처리**: 모든 실패 케이스 고려

### 문서 품질
- **완성도**: 단계별 가이드 완비
- **정확성**: 실제 동작과 일치
- **친화성**: 초보자 용어 사용

## 학습 및 개선

### 사용자 피드백 패턴
- **긍정적**: 한글 주석, 단계별 가이드, 실무 적용성
- **개선 요청**: 더 많은 예제, Mock 서버, 에러 가이드

### 지속적 개선 영역
1. **예제 확장**: 다양한 실무 시나리오
2. **도구 통합**: 더 나은 개발 경험
3. **커뮤니티**: 질문/답변 생태계

---

이 규칙들은 프로젝트 작업 시 일관성과 품질을 유지하기 위한 가이드라인입니다. 
새로운 패턴이나 인사이트가 발견되면 이 파일을 업데이트하여 축적된 지식을 보존합니다.